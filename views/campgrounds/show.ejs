<!--Show Template for viewing a single campground -->

<!-- access layout folder and boilerplate.ejs -->
<%layout("layouts/boilerplate")%>

<!-- link stars.css in stylesheets public directory -->
<link rel="stylesheet" href="/stylesheets/stars.css">

<div class="row">
    <!-- campground info takes 6 units -->
    <div class="col-6">
        <!-- bootstrap carousel for displaying multiple images -->
        <div id="campgroundCarousel" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-inner">
                <!-- for all of the images -->
                <%campground.images.forEach((img, i) => { %>
                <!-- display each image using image url -->   
                <!-- class of active is the image displaying first -->
                <!-- if index = 0 so if it is the first image, show class of active, show image, otherwise if it is not zero do not show active -->
                <!-- if active was set on other images, you would not be able to see the other images -->
                <div class="carousel-item <%= i === 0 ? "active" : ""%>">
                    <img src="<%=img.url%>" class="d-block w-100" alt="">
                </div>
                <% }) %> 
            </div>
            <!-- for campgrounds with single images, do not show the controls -->
            <!-- if there is more than one campground image then display the controls -->
            <% if (campground.images.length > 1) { %> 
            <button class="carousel-control-prev" type="button" data-bs-target="#campgroundCarousel" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#campgroundCarousel" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
            <% } %> 
        </div>
        <div class="card mb-3">
            <div class="card-body">
              <h5 class="card-title"><%=campground.title%></h5>
              <p class="card-text"><%=campground.description%></p>
            </div>
            <ul class="list-group list-group-flush">
              <li class="list-group-item">$<%=campground.price%>/night</li>
              <li class="list-group-item text-muted"><%=campground.location%></li>
            </ul>

            <!-- do not want to show this card-body if you do not own the campground -->
            <!-- if a currentUser exist (if someone is logged in) AND the campground author equals the id of the current logged in user -->
            <% if (currentUser && campground.author.equals(currentUser._id)) { %> 
            <!-- then show the card body where they can edit and delete -->
            <div class="card-body">
                <!-- link to edit the campground -->
                <a class="card-link btn btn-info" href="/campgrounds/<%=campground._id%>/edit">Edit</a>
                
                <!--
                    form that sends a POST request to the URL but it tricks express
                    into thinking that its a delete request with method override
                -->
                <form class="d-inline" action="/campgrounds/<%=campground._id%>/?_method=DELETE" method="POST">
                    <button class="btn btn-danger">Delete</button>
                </form>
            </div>
            <% } %> 
            <div class="card-footer text-muted">
                Submitted by <%=campground.author.username%>
            </div>
        </div>
    </div>
    <!-- review section is other 6 units -->
    <div class="col-6">
        <!-- Mapbox Map -->
        <!-- enable the map, tell Mapbox to put the map in the div -->
        <div id="map"></div>

        <!-- if there is a currentUser, render this form to leave a review -->
        <% if (currentUser) { %> 
        <h2 class="mt-3 mb-3">Leave a Review</h2>
        <!-- 
            form for writing a review 
            form that sends a POST request to /campgrounds/:id/reviews   
            novalidate - don't validate with HTML validations    
        -->
        <form class="mb-3 validated-form" action="/campgrounds/<%=campground._id%>/reviews" method="POST" novalidate>
            <!-- using star styles -->
            <!-- review[rating] group things under review -->
            <div>
                <fieldset class="starability-basic">
                    <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="1" checked aria-label="No rating." />
                    <input type="radio" id="first-rate1" name="review[rating]" value="1" />
                    <label for="first-rate1" title="Terrible">1 star</label>
                    <input type="radio" id="first-rate2" name="review[rating]" value="2" />
                    <label for="first-rate2" title="Not good">2 stars</label>
                    <input type="radio" id="first-rate3" name="review[rating]" value="3" />
                    <label for="first-rate3" title="Average">3 stars</label>
                    <input type="radio" id="first-rate4" name="review[rating]" value="4" />
                    <label for="first-rate4" title="Very good">4 stars</label>
                    <input type="radio" id="first-rate5" name="review[rating]" value="5" />
                    <label for="first-rate5" title="Amazing">5 stars</label>
                </fieldset>
            </div>
            <div class="mb-3">
                <label class="form-label" for="body">Review Text</label>

                <!-- review[body] group things under review 
                     required, so cannot send an empty review
                -->
                <textarea class="form-control" name="review[body]" id="body" cols="30" rows="3" required></textarea>
            
                <!-- success text for valid input of form 
                     client Side validation so that you cannot submit an empty review
                -->
                <div class="valid-feedback">
                    Looks good!
                </div>
            </div>
            <button class="btn btn-success">Submit</button>
        </form>
        <% } else { %> 
            <h2 class="mt-3 mb-3">No Reviews</h2>
            <p class="mt-3 mb-3">You must be logged in to leave a review!</p>
        <% } %> 
        
        <!--
            loop over all the reviews and list them
        -->
        <% for (let review of campground.reviews) { %>
        <p style="overflow: auto;">
            <div class="card mt-3 mb-3">
                <div class="card-body">
                    <h5 class="card-title"><%=review.author.username%></h5>
                    <!-- using star styles data-rating is the rating number -->
                    <p class="starability-result" data-rating="<%=review.rating%>">
                        <!-- does not show on page but for accessibility purposes show rating as well for screen readers -->
                        Rated: <%=review.rating%> stars
                    </p>
                    <p class="card-title"><%=review.body%></p>
    
                    <!-- form for deleting a review 
                         for each review we are making a separate form to delete each review
                    -->
                    <!-- do not want to show the delete button if you do not own the review -->
                    <!-- if a currentUser exist (if someone is logged in) AND the review author equals the id of the current logged in user -->
                    <% if (currentUser && review.author.equals(currentUser._id)) { %> 
                    <form action="/campgrounds/<%=campground._id %>/reviews/<%=review._id%>?_method=DELETE" method="POST">
                        <button class="btn btn-sm btn-danger">Delete</button>
                    </form>
                    <% } %> 
                </div>
            </div>
        </p>
        <% } %>
    </div>
</div>

<!-- 
 why we can't use process.env.MAPBOX_TOKEN for accessToekn
 ejs engine creates templates on frontend so when we use this script on show.ejs page
 it does not have access to the backend where process.env.MAPBOX_TOKEN is
 so we use ejs tags to access process.env.MAPBOX_TOKEN first and inject it into the rendered template
-->
<!-- 
 to mark the pin of coordinates on map we need to do the same thing with
 the process.env.MAPBOX_TOKEN.
 use ejs to create a js variable what we have access to in our js file
 hand data off from the server side to the client side
 
 need to get access to token in a .ejs file to .js file
 pass through a campground variable, then will have access to that immediately on the client side
 JSON.stringify() to convert JavaScript object campground to a JSON string
-->
<script>
    const mapToken = "<%-process.env.MAPBOX_TOKEN%>";
    const campground = <%-JSON.stringify(campground) %>;
</script>

<!-- script for showing mapbox map -->
<script src="/javascripts/showPageMap.js"></script>